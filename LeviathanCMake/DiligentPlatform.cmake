# Diligent platform detection code from DiligentEngine/DiligentCore/CMakeLists.txt
# Diligent engine is licensed under the Apache 2 license, see License.txt for details

set(PLATFORM_WIN32 FALSE CACHE INTERNAL "")
set(PLATFORM_UNIVERSAL_WINDOWS FALSE CACHE INTERNAL "")
set(PLATFORM_ANDROID FALSE CACHE INTERNAL "")
set(PLATFORM_LINUX FALSE CACHE INTERNAL "")
set(PLATFORM_MACOS FALSE CACHE INTERNAL "")
set(PLATFORM_IOS FALSE CACHE INTERNAL "")
set(D3D11_SUPPORTED FALSE CACHE INTERNAL "D3D11 is not spported")
set(D3D12_SUPPORTED FALSE CACHE INTERNAL "D3D12 is not spported")
set(GL_SUPPORTED FALSE CACHE INTERNAL "GL is not spported")
set(GLES_SUPPORTED FALSE CACHE INTERNAL "GLES is not spported")
set(VULKAN_SUPPORTED FALSE CACHE INTERNAL "Vulkan is not spported")
set(METAL_SUPPORTED FALSE CACHE INTERNAL "Metal is not spported")

if(WIN32)
  if(${CMAKE_SYSTEM_NAME} STREQUAL "WindowsStore")
    set(PLATFORM_UNIVERSAL_WINDOWS TRUE CACHE INTERNAL "Target platform: Windows Store")
    message("Target platform: Universal Windows. SDK Version: " ${CMAKE_SYSTEM_VERSION})
  else()
    set(PLATFORM_WIN32 TRUE CACHE INTERNAL "Target platform: Win32") #WIN32 is a variable, so we cannot use string "WIN32"
    message("Target platform: Win32. SDK Version: " ${CMAKE_SYSTEM_VERSION})
  endif()
else()
  if(${CMAKE_SYSTEM_NAME} STREQUAL "Android")
    set(PLATFORM_ANDROID TRUE CACHE INTERNAL "Target platform: Android")
    message("Target platform: Android")
  elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(PLATFORM_LINUX TRUE CACHE INTERNAL "Target platform: Linux")
    message("Target Platform: Linux")
  elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    if(IOS)
      set(PLATFORM_IOS TRUE CACHE INTERNAL "Target platform: iOS")
      message("Target Platform: iOS")
    else()
      set(PLATFORM_MACOS TRUE CACHE INTERNAL "Target platform: MacOS")
      message("Target Platform: MacOS")
    endif()
  elseif(${CMAKE_SYSTEM_NAME} STREQUAL "iOS")
    set(PLATFORM_IOS TRUE CACHE INTERNAL "Target platform: iOS")
    message("Target Platform: iOS")
  else()
    message(FATAL_ERROR "Unsupported platform")
  endif()
endif(WIN32)

if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
  set(ARCH 64 CACHE INTERNAL "64-bit architecture")
else()
  set(ARCH 32 CACHE INTERNAL "32-bit architecture")
endif()


if(PLATFORM_WIN32)
  if(MSVC)
    set(D3D11_SUPPORTED TRUE CACHE INTERNAL "D3D11 is supported on Win32 platform")
    if(NOT CMAKE_SYSTEM_VERSION STREQUAL "8.1")
      set(D3D12_SUPPORTED TRUE CACHE INTERNAL "D3D12 is supported on Win32 platform")
    endif()
  else()
    message("Building with MinGW")
    set(MINGW_BUILD TRUE CACHE INTERNAL "Building with MinGW")
    set(D3D11_SUPPORTED FALSE CACHE INTERNAL "D3D11 requires compiling with MSVC")
    set(D3D12_SUPPORTED FALSE CACHE INTERNAL "D3D12 requires compiling with MSVC")
  endif()

  set(GL_SUPPORTED TRUE CACHE INTERNAL "OpenGL is supported on Win32 platform")
  set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is supported on Win32 platform")
elseif(PLATFORM_UNIVERSAL_WINDOWS)
  set(D3D11_SUPPORTED TRUE CACHE INTERNAL "D3D11 is supported on Univeral Windows platform")
  if(NOT CMAKE_SYSTEM_VERSION STREQUAL "8.1")
	set(D3D12_SUPPORTED TRUE CACHE INTERNAL "D3D12 is supported on Univeral Windows platform")
  endif()
elseif(PLATFORM_ANDROID)
  set(GLES_SUPPORTED TRUE CACHE INTERNAL "OpenGLES is supported on Android platform")
  string(REGEX MATCH [0-9]+ ANDROID_API_LEVEL ${ANDROID_PLATFORM})
  if(${ARCH} EQUAL 64 AND ${ANDROID_API_LEVEL} GREATER 23)
    set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is supported on Android platform")
  endif()
elseif(PLATFORM_LINUX)
  set(GL_SUPPORTED TRUE CACHE INTERNAL "OpenGL is supported on Linux platform")
  if(${ARCH} EQUAL 64)
    set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is supported on Linux64 platform")
  endif()
elseif(PLATFORM_MACOS)
  set(GL_SUPPORTED TRUE CACHE INTERNAL "OpenGL is supported on MacOS platform")
  set(METAL_SUPPORTED TRUE CACHE INTERNAL "Metal is supported on MacOS platform")
  set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is enabled through MoltenVK on MacOS platform")
elseif(PLATFORM_IOS)
  set(GLES_SUPPORTED TRUE CACHE INTERNAL "OpenGLES is supported on iOS platform")
  set(METAL_SUPPORTED TRUE CACHE INTERNAL "Metal is supported on iOS platform")
  if(VULKAN_SDK)
    # iOS.toolchain.cmake currently configures cmake to only search iOS SDK for libraries,
    # thus find_library will be unable to find MoltenVK in VulkanSDK
    # find_library(MoltenVK_LIBRARY MoltenVK PATHS "${VULKAN_SDK}/MoltenVK/iOS/dynamic")
    set(MoltenVK_LIBRARY "${VULKAN_SDK}/MoltenVK/iOS/dynamic/libMoltenVK.dylib" CACHE INTERNAL "MoltenVK library")
    if(EXISTS ${MoltenVK_LIBRARY})
      set(VULKAN_SUPPORTED TRUE CACHE INTERNAL "Vulkan is enabled through MoltenVK on iOS platform")
    else()
      message(WARNING "${MoltenVK_LIBRARY} does not exist. Vulkan backend will be disabled.")
      unset(MoltenVK_LIBRARY CACHE)
    endif()
  else()
    # TODO: I think we need to add vulkan sdk finding ourselves for mac?
    message("VULKAN_SDK is undefined. Vulkan backend will be disabled.")
  endif()
else()
  message(FATAL_ERROR "No PLATFORM_XXX variable defined. Make sure that 'DiligentCore' folder is processed first")
endif()


option(DILIGENT_NO_DIRECT3D11 "Disable Direct3D11 backend" OFF)
option(DILIGENT_NO_DIRECT3D12 "Disable Direct3D12 backend" OFF)
option(DILIGENT_NO_OPENGL "Disable OpenGL/GLES backend" OFF)
option(DILIGENT_NO_VULKAN "Disable Vulkan backend" OFF)
option(DILIGENT_NO_METAL "Disable Metal backend" OFF)
if(${DILIGENT_NO_DIRECT3D11})
  set(D3D11_SUPPORTED FALSE CACHE INTERNAL "D3D11 backend is forcibly disabled")
endif()
if(${DILIGENT_NO_DIRECT3D12})
  set(D3D12_SUPPORTED FALSE CACHE INTERNAL "D3D12 backend is forcibly disabled")
endif()
if(${DILIGENT_NO_OPENGL})
  set(GL_SUPPORTED FALSE CACHE INTERNAL "OpenGL backend is forcibly disabled")
  set(GLES_SUPPORTED FALSE CACHE INTERNAL "OpenGLES backend is forcibly disabled")
endif()
if(${DILIGENT_NO_VULKAN})
  set(VULKAN_SUPPORTED FALSE CACHE INTERNAL "Vulkan backend is forcibly disabled")
endif()
if(${DILIGENT_NO_METAL})
  set(METAL_SUPPORTED FALSE CACHE INTERNAL "Metal backend is forcibly disabled")
endif()

if(NOT (${D3D11_SUPPORTED} OR ${D3D12_SUPPORTED} OR ${GL_SUPPORTED} OR ${GLES_SUPPORTED} OR ${VULKAN_SUPPORTED} OR ${METAL_SUPPORTED}))
  message(FATAL_ERROR "No rendering backends are select to build")
endif()
